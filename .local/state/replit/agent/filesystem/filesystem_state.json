{"file_contents":{"design_guidelines.md":{"content":"# Math League PWA Design Guidelines\n\n## Design Approach\n**Reference-Based Approach**: Drawing inspiration from kid-friendly educational apps like Khan Academy Kids and Duolingo, with warm, approachable design patterns that encourage learning through play.\n\n## Core Design Elements\n\n### Color Palette\n**Primary Colors (Light Mode):**\n- Background: 45 15% 95% (warm cream)\n- Primary: 25 40% 60% (warm orange-brown)\n- Secondary: 180 30% 70% (soft teal)\n\n**Primary Colors (Dark Mode):**\n- Background: 25 8% 15% (dark warm gray)\n- Primary: 35 45% 65% (lighter warm orange)\n- Secondary: 180 25% 60% (muted teal)\n\n**Accent Colors:**\n- Success: 140 35% 55% (gentle green)\n- Warning: 45 50% 65% (soft yellow)\n- Error: 15 40% 60% (warm red)\n\n**Gradient Treatments:**\n- Hero sections: Subtle vertical gradients from primary to slightly lighter tints\n- Progress bars: Gentle horizontal gradients using success colors\n- Card backgrounds: Very subtle radial gradients for depth\n\n### Typography\n**Font Families:**\n- Primary: 'Poppins' (Google Fonts) - rounded, friendly sans-serif for headings and UI\n- Secondary: 'Inter' (Google Fonts) - clean, readable for body text and math problems\n- Monospace: 'JetBrains Mono' for timer displays and scoring\n\n**Font Scales:**\n- Headings: 24px, 20px, 18px (bold weights)\n- Body: 16px, 14px (regular and medium weights)\n- Small text: 12px (medium weight)\n\n### Layout System\n**Spacing Units:** Consistent use of Tailwind units 2, 4, 6, 8, 12, 16\n- Micro spacing: p-2, m-2 for tight elements\n- Standard spacing: p-4, m-4 for general layout\n- Section spacing: p-8, m-8 for major content blocks\n- Large spacing: p-12, p-16 for hero sections and page containers\n\n### Component Library\n\n**Navigation:**\n- Top navigation bar with hedgehog mascot logo\n- Large, rounded tab buttons (â‰¥44pt tap targets)\n- Breadcrumb navigation for deep content\n\n**Cards & Containers:**\n- Rounded corners (12px radius) with subtle shadows\n- Gentle hover states with slight elevation increase\n- Color-coded borders for different round types (Sprint: orange, Target: blue, Number Sense: green, Team: purple)\n\n**Interactive Elements:**\n- Large, rounded buttons with generous padding\n- Multiple choice options as card-style buttons\n- Timer displays with prominent, easy-to-read typography\n- Progress bars with animated fills and hedgehog progress indicators\n\n**Forms & Inputs:**\n- Rounded input fields with soft borders\n- Large touch-friendly number pads for mobile\n- Clear validation states with friendly error messages\n\n**Data Display:**\n- Score cards with large, prominent numbers\n- Achievement badges with hedgehog-themed icons\n- Calendar view with color-coded session dots\n- Charts using pastel color schemes for progress tracking\n\n**Hedgehog Coach Character:**\n- Friendly, illustrated hedgehog in various poses\n- Appears in hint bubbles, celebrations, and encouragement moments\n- Consistent art style: soft, rounded illustration with warm colors\n\n## Images\n**Hedgehog Mascot Illustrations:**\n- Main coach character in multiple emotional states (encouraging, celebrating, thinking)\n- Small icon versions for navigation and progress indicators\n- Achievement celebration animations\n\n**Background Elements:**\n- Subtle mathematical pattern overlays (very low opacity geometric shapes)\n- No large hero images - focus on clean, uncluttered interface\n- Small decorative mathematical icons (calculators, pencils, numbers) as accent elements\n\n## Key Design Principles\n1. **Kid-Friendly First**: Large touch targets, high contrast, simple navigation\n2. **Learning-Focused**: Minimal distractions, clear hierarchy, progress visibility\n3. **Warm & Encouraging**: Soft colors, friendly typography, positive reinforcement\n4. **Professional Yet Playful**: Maintaining educational credibility while being engaging\n5. **Accessibility**: High contrast options, clear visual hierarchy, screen reader friendly\n\n## Responsive Considerations\n- Laptop-first design with mobile adaptations\n- Touch-friendly interface elements (minimum 44pt)\n- Collapsible navigation for smaller screens\n- Stacked layouts for mobile problem-solving interfaces","size_bytes":4115},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/problemGenerator.ts":{"content":"// OpenAI integration for Math League problem generation\n// Uses blueprint:javascript_openai\nimport OpenAI from \"openai\";\nimport type { Problem, InsertProblem } from \"@shared/schema\";\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\ninterface GeneratedProblem {\n  prompt: string;\n  answer: string;\n  choices?: string[];\n  explanation: string;\n  difficulty: number;\n  tags: string[];\n}\n\ninterface ProblemGenerationRequest {\n  roundType: 'sprint' | 'target' | 'numbersense' | 'team';\n  difficulty: number; // 1-5 scale\n  topics?: string[];\n  gradeLevel?: number;\n}\n\nexport class MathLeagueProblemGenerator {\n  private getSystemPrompt(roundType: string): string {\n    const basePrompt = `You are Hedgie, a friendly hedgehog Math League coach for elementary students (grades 3-6). Generate authentic Math League competition problems that mirror official mathleague.org style and difficulty.`;\n    \n    const roundSpecifics = {\n      sprint: `\nSPRINT ROUND: Generate multiple choice problems (A-D) that can be solved in 1-2 minutes without calculator.\n- Focus on: arithmetic, fractions, decimals, basic geometry, number theory\n- Provide 4 clear answer choices\n- Avoid trick questions, keep straightforward`,\n      \n      target: `\nTARGET ROUND: Generate paired problems that require calculator and deeper thinking (3-4 minutes each).\n- Focus on: algebra, advanced geometry, number patterns, word problems\n- Problems should be challenging but solvable\n- Numerical answers only (no multiple choice)`,\n      \n      numbersense: `\nNUMBER SENSE ROUND: Generate mental math problems solvable in 30 seconds.\n- Focus on: quick arithmetic, estimation, number recognition\n- Integer answers only\n- Problems should reward mental math shortcuts`,\n      \n      team: `\nTEAM ROUND: Generate collaborative problems requiring 2-3 minutes of team discussion.\n- Focus on: multi-step word problems, logic, team strategy\n- Should encourage discussion and different approaches\n- Numerical answers only`\n    };\n    \n    return basePrompt + (roundSpecifics[roundType as keyof typeof roundSpecifics] || '');\n  }\n  \n  private getExampleProblems(roundType: string): string {\n    const examples = {\n      sprint: `\nExample Sprint problems:\n- \"What is 3/4 + 1/6?\" (A) 5/10 (B) 11/12 (C) 4/10 (D) 5/6\n- \"A rectangle has length 8 and width 5. What is its area?\" (A) 13 (B) 26 (C) 40 (D) 45`,\n      \n      target: `\nExample Target problems:\n- \"The sum of two consecutive integers is 37. What is the larger integer?\"\n- \"A circle has radius 6. What is its circumference? (Use Ï€ = 3.14)\"`,\n      \n      numbersense: `\nExample Number Sense problems:\n- \"25 Ã— 16 = ?\"\n- \"What is 15% of 80?\"\n- \"How many seconds in 2.5 minutes?\"`,\n      \n      team: `\nExample Team problems:\n- \"Sarah has 3 times as many stickers as Tom. Together they have 48 stickers. How many does Sarah have?\"\n- \"A pizza is cut into 8 equal slices. If 3/4 of the pizza is eaten, how many slices remain?\"`\n    };\n    \n    return examples[roundType as keyof typeof examples] || '';\n  }\n\n  async generateProblem(request: ProblemGenerationRequest): Promise<GeneratedProblem> {\n    // First try OpenAI, then fallback to pre-made problems if quota exceeded\n    try {\n      return await this.generateWithOpenAI(request);\n    } catch (error) {\n      console.log('OpenAI unavailable, using fallback problems:', error instanceof Error ? error.message : String(error));\n      return this.getFallbackProblem(request);\n    }\n  }\n  \n  private async generateWithOpenAI(request: ProblemGenerationRequest): Promise<GeneratedProblem> {\n    const systemPrompt = this.getSystemPrompt(request.roundType);\n    const examples = this.getExampleProblems(request.roundType);\n    const topicFilter = request.topics?.length ? `Focus on these topics: ${request.topics.join(', ')}.` : '';\n    \n    const userPrompt = `Generate 1 authentic Math League ${request.roundType} problem for grade ${request.gradeLevel || 4} students.\n\nDifficulty: ${request.difficulty}/5\n${topicFilter}\n${examples}\n\nReturn your response as JSON with this exact structure:\n{\n  \"prompt\": \"The problem statement\",\n  \"answer\": \"Correct answer (just the value)\",\n  \"choices\": ${request.roundType === 'sprint' ? '[\"A option\", \"B option\", \"C option\", \"D option\"]' : 'null'},\n  \"explanation\": \"Kid-friendly solution explanation\",\n  \"difficulty\": ${request.difficulty},\n  \"tags\": [\"topic1\", \"topic2\"]\n}`;\n\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\", // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025\n        messages: [\n          { role: \"system\", content: systemPrompt },\n          { role: \"user\", content: userPrompt }\n        ],\n        response_format: { type: \"json_object\" },\n        temperature: 0.7,\n        max_tokens: 800\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || '{}');\n      \n      // Validate the generated problem\n      if (!result.prompt || !result.answer) {\n        throw new Error('Generated problem missing required fields');\n      }\n      \n      // Ensure sprint problems have choices\n      if (request.roundType === 'sprint' && (!result.choices || result.choices.length !== 4)) {\n        throw new Error('Sprint problems must have exactly 4 multiple choice options');\n      }\n      \n      return {\n        prompt: result.prompt,\n        answer: result.answer,\n        choices: result.choices || null,\n        explanation: result.explanation || 'Solution explanation not provided',\n        difficulty: result.difficulty || request.difficulty,\n        tags: Array.isArray(result.tags) ? result.tags : ['general']\n      };\n    } catch (error) {\n      console.error('Problem generation failed:', error);\n      throw new Error(`Failed to generate ${request.roundType} problem: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n  \n  private getFallbackProblem(request: ProblemGenerationRequest): GeneratedProblem {\n    const fallbackProblems = {\n      sprint: [\n        {\n          prompt: \"What is 3/4 + 1/8?\",\n          answer: \"7/8\",\n          choices: [\"7/8\", \"4/12\", \"1/2\", \"5/8\"],\n          explanation: \"Find common denominator: 3/4 = 6/8, then 6/8 + 1/8 = 7/8\",\n          difficulty: 3,\n          tags: [\"fractions\", \"addition\"]\n        },\n        {\n          prompt: \"A rectangle has length 9 and width 4. What is its perimeter?\",\n          answer: \"26\",\n          choices: [\"26\", \"36\", \"13\", \"18\"],\n          explanation: \"Perimeter = 2(length + width) = 2(9 + 4) = 2(13) = 26\",\n          difficulty: 2,\n          tags: [\"geometry\", \"perimeter\"]\n        },\n        {\n          prompt: \"What is 15% of 60?\",\n          answer: \"9\",\n          choices: [\"9\", \"12\", \"6\", \"15\"],\n          explanation: \"15% = 0.15, so 0.15 Ã— 60 = 9\",\n          difficulty: 3,\n          tags: [\"percentages\", \"multiplication\"]\n        }\n      ],\n      target: [\n        {\n          prompt: \"The sum of two consecutive even integers is 74. What is the larger integer?\",\n          answer: \"38\",\n          explanation: \"Let x be first even integer. Then x + (x+2) = 74, so 2x + 2 = 74, 2x = 72, x = 36. Larger is 38.\",\n          difficulty: 4,\n          tags: [\"algebra\", \"consecutive integers\"]\n        },\n        {\n          prompt: \"A circle has diameter 12. What is its area? (Use Ï€ = 3.14)\",\n          answer: \"113.04\",\n          explanation: \"Radius = 6, Area = Ï€rÂ² = 3.14 Ã— 6Â² = 3.14 Ã— 36 = 113.04\",\n          difficulty: 3,\n          tags: [\"geometry\", \"circles\", \"area\"]\n        }\n      ],\n      numbersense: [\n        {\n          prompt: \"25 Ã— 16\",\n          answer: \"400\",\n          explanation: \"25 Ã— 16 = 25 Ã— 4 Ã— 4 = 100 Ã— 4 = 400\",\n          difficulty: 3,\n          tags: [\"multiplication\", \"mental math\"]\n        },\n        {\n          prompt: \"What is 20% of 85?\",\n          answer: \"17\",\n          explanation: \"20% = 1/5, so 85 Ã· 5 = 17\",\n          difficulty: 2,\n          tags: [\"percentages\", \"mental math\"]\n        }\n      ],\n      team: [\n        {\n          prompt: \"A pizza is cut into 12 equal slices. If 3/4 of the pizza is eaten, how many slices remain?\",\n          answer: \"3\",\n          explanation: \"3/4 of 12 slices = 9 slices eaten. 12 - 9 = 3 slices remain.\",\n          difficulty: 2,\n          tags: [\"fractions\", \"word problems\"]\n        },\n        {\n          prompt: \"Tom has twice as many marbles as Sarah. Together they have 36 marbles. How many does Tom have?\",\n          answer: \"24\",\n          explanation: \"Let Sarah have x marbles. Tom has 2x. x + 2x = 36, so 3x = 36, x = 12. Tom has 24.\",\n          difficulty: 4,\n          tags: [\"algebra\", \"word problems\"]\n        }\n      ]\n    };\n    \n    const problemsForType = fallbackProblems[request.roundType] || fallbackProblems.sprint;\n    const randomProblem = problemsForType[Math.floor(Math.random() * problemsForType.length)];\n    \n    return {\n      ...randomProblem,\n      difficulty: request.difficulty // Override with requested difficulty\n    };\n  }\n\n  async generateMultipleProblems(request: ProblemGenerationRequest, count: number = 5): Promise<GeneratedProblem[]> {\n    const problems = [];\n    \n    for (let i = 0; i < count; i++) {\n      try {\n        const problem = await this.generateProblem(request);\n        problems.push(problem);\n        \n        // Small delay to avoid rate limits\n        if (i < count - 1) {\n          await new Promise(resolve => setTimeout(resolve, 500));\n        }\n      } catch (error) {\n        console.error(`Failed to generate problem ${i + 1}:`, error instanceof Error ? error.message : String(error));\n        // Continue generating other problems even if one fails\n      }\n    }\n    \n    return problems;\n  }\n\n  convertToInsertProblem(generated: GeneratedProblem, roundType: string): InsertProblem {\n    return {\n      type: roundType as 'sprint' | 'target' | 'numbersense' | 'team',\n      prompt: generated.prompt,\n      answer: generated.answer,\n      choices: generated.choices ? JSON.stringify(generated.choices) : null,\n      difficulty: generated.difficulty,\n      tags: JSON.stringify(generated.tags),\n      source: 'AI Generated - Hedgie Coach',\n      isGenerated: true\n    };\n  }\n}\n\nexport const problemGenerator = new MathLeagueProblemGenerator();","size_bytes":10364},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { problemGenerator } from \"./problemGenerator\";\nimport { insertProblemSchema, insertPracticeSessionSchema, insertProblemAttemptSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\n// Request validation schemas\nconst generateProblemSchema = z.object({\n  roundType: z.enum(['sprint', 'target', 'numbersense', 'team']),\n  difficulty: z.number().min(1).max(5),\n  topics: z.array(z.string()).optional(),\n  gradeLevel: z.number().min(3).max(6).optional(),\n  count: z.number().min(1).max(10).optional()\n});\n\nconst createPracticeSessionSchema = z.object({\n  studentId: z.string(),\n  roundType: z.enum(['sprint', 'target', 'numbersense', 'team']),\n  totalQuestions: z.number().min(1),\n  settings: z.object({}).optional()\n});\n\nconst submitAnswerSchema = z.object({\n  sessionId: z.string(),\n  problemId: z.string(),\n  studentAnswer: z.string(),\n  timeSpent: z.number().optional(),\n  hintsUsed: z.number().optional()\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Problem generation routes\n  app.post('/api/problems/generate', async (req, res) => {\n    try {\n      const { roundType, difficulty, topics, gradeLevel, count } = generateProblemSchema.parse(req.body);\n      \n      if (count && count > 1) {\n        // Generate multiple problems\n        const problems = await problemGenerator.generateMultipleProblems({\n          roundType, difficulty, topics, gradeLevel\n        }, count);\n        \n        // Save generated problems to database\n        const savedProblems = [];\n        for (const problem of problems) {\n          const insertData = problemGenerator.convertToInsertProblem(problem, roundType);\n          const saved = await storage.createProblem(insertData);\n          savedProblems.push({ ...saved, explanation: problem.explanation });\n        }\n        \n        res.json({ problems: savedProblems });\n      } else {\n        // Generate single problem\n        const problem = await problemGenerator.generateProblem({\n          roundType, difficulty, topics, gradeLevel\n        });\n        \n        // Save to database\n        const insertData = problemGenerator.convertToInsertProblem(problem, roundType);\n        const savedProblem = await storage.createProblem(insertData);\n        \n        res.json({ \n          problem: { ...savedProblem, explanation: problem.explanation } \n        });\n      }\n    } catch (error) {\n      console.error('Problem generation error:', error);\n      res.status(500).json({ \n        error: 'Failed to generate problem', \n        message: error instanceof Error ? error.message : 'Unknown error' \n      });\n    }\n  });\n\n  // Get existing problems\n  app.get('/api/problems', async (req, res) => {\n    try {\n      const { type, limit } = req.query;\n      const problems = await storage.getProblems(\n        type as 'sprint' | 'target' | 'numbersense' | 'team' | undefined, \n        limit ? parseInt(limit as string) : undefined\n      );\n      res.json({ problems });\n    } catch (error) {\n      console.error('Failed to fetch problems:', error);\n      res.status(500).json({ error: 'Failed to fetch problems' });\n    }\n  });\n\n  // Get specific problem\n  app.get('/api/problems/:id', async (req, res) => {\n    try {\n      const problem = await storage.getProblem(req.params.id);\n      if (!problem) {\n        return res.status(404).json({ error: 'Problem not found' });\n      }\n      res.json({ problem });\n    } catch (error) {\n      console.error('Failed to fetch problem:', error);\n      res.status(500).json({ error: 'Failed to fetch problem' });\n    }\n  });\n\n  // Practice session routes\n  app.post('/api/practice-sessions', async (req, res) => {\n    try {\n      const sessionData = createPracticeSessionSchema.parse(req.body);\n      const session = await storage.createPracticeSession(sessionData);\n      res.json({ session });\n    } catch (error) {\n      console.error('Failed to create practice session:', error);\n      res.status(500).json({ error: 'Failed to create practice session' });\n    }\n  });\n\n  // Submit answer for practice session\n  app.post('/api/practice-sessions/submit-answer', async (req, res) => {\n    try {\n      const { sessionId, problemId, studentAnswer, timeSpent, hintsUsed } = submitAnswerSchema.parse(req.body);\n      \n      // Get the correct answer\n      const problem = await storage.getProblem(problemId);\n      if (!problem) {\n        return res.status(404).json({ error: 'Problem not found' });\n      }\n      \n      // Check if answer is correct (normalize for comparison)\n      const normalizedStudentAnswer = studentAnswer.trim().toLowerCase();\n      const normalizedCorrectAnswer = problem.answer.trim().toLowerCase();\n      const isCorrect = normalizedStudentAnswer === normalizedCorrectAnswer;\n      \n      // Create problem attempt record\n      const attempt = await storage.createProblemAttempt({\n        sessionId,\n        problemId,\n        studentAnswer,\n        isCorrect,\n        timeSpent: timeSpent || 0,\n        hintsUsed: hintsUsed || 0\n      });\n      \n      // Update session stats if answer is correct\n      if (isCorrect) {\n        const session = await storage.getPracticeSession(sessionId);\n        if (session) {\n          await storage.updatePracticeSession(sessionId, {\n            correctAnswers: session.correctAnswers + 1\n          });\n        }\n      }\n      \n      res.json({ \n        attempt, \n        isCorrect, \n        correctAnswer: problem.answer \n      });\n    } catch (error) {\n      console.error('Failed to submit answer:', error);\n      res.status(500).json({ error: 'Failed to submit answer' });\n    }\n  });\n\n  // Complete practice session\n  app.post('/api/practice-sessions/:id/complete', async (req, res) => {\n    try {\n      const { score, timeSpent } = req.body;\n      \n      const session = await storage.updatePracticeSession(req.params.id, {\n        completedAt: new Date(),\n        score: score || 0,\n        timeSpent: timeSpent || 0\n      });\n      \n      if (!session) {\n        return res.status(404).json({ error: 'Session not found' });\n      }\n      \n      res.json({ session });\n    } catch (error) {\n      console.error('Failed to complete session:', error);\n      res.status(500).json({ error: 'Failed to complete session' });\n    }\n  });\n\n  // Get student's practice history\n  app.get('/api/students/:studentId/sessions', async (req, res) => {\n    try {\n      const { limit } = req.query;\n      const sessions = await storage.getStudentSessions(\n        req.params.studentId,\n        limit ? parseInt(limit as string) : undefined\n      );\n      res.json({ sessions });\n    } catch (error) {\n      console.error('Failed to fetch student sessions:', error);\n      res.status(500).json({ error: 'Failed to fetch sessions' });\n    }\n  });\n\n  // Student management routes (for demo - in real app would be behind auth)\n  app.post('/api/students', async (req, res) => {\n    try {\n      // For demo, using a default user ID\n      const studentData = {\n        ...req.body,\n        userId: 'demo-user' // In real app, get from authenticated user\n      };\n      const student = await storage.createStudent(studentData);\n      res.json({ student });\n    } catch (error) {\n      console.error('Failed to create student:', error);\n      res.status(500).json({ error: 'Failed to create student' });\n    }\n  });\n\n  // Health check endpoint\n  app.get('/api/health', (req, res) => {\n    res.json({ \n      status: 'healthy', \n      timestamp: new Date().toISOString(),\n      message: 'Hedgie Math League Prep API is running!' \n    });\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":7694},"server/storage.ts":{"content":"import { \n  users, students, problems, practiceSessions, problemAttempts, studentGoals,\n  type User, type InsertUser, type Student, type InsertStudent,\n  type Problem, type InsertProblem, type PracticeSession, type InsertPracticeSession,\n  type ProblemAttempt, type InsertProblemAttempt, type StudentGoal, type InsertStudentGoal\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and } from \"drizzle-orm\";\n\n// Updated interface with Math League CRUD methods\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Students\n  createStudent(student: InsertStudent): Promise<Student>;\n  getStudent(id: string, userId: string): Promise<Student | undefined>;\n  getStudentsByUser(userId: string): Promise<Student[]>;\n  \n  // Problems\n  createProblem(problem: InsertProblem): Promise<Problem>;\n  getProblems(type?: 'sprint' | 'target' | 'numbersense' | 'team', limit?: number): Promise<Problem[]>;\n  getProblem(id: string): Promise<Problem | undefined>;\n  \n  // Practice Sessions\n  createPracticeSession(session: InsertPracticeSession): Promise<PracticeSession>;\n  updatePracticeSession(id: string, userId: string, updates: Partial<PracticeSession>): Promise<PracticeSession | undefined>;\n  getPracticeSession(id: string, userId: string): Promise<PracticeSession | undefined>;\n  getStudentSessions(studentId: string, userId: string, limit?: number): Promise<PracticeSession[]>;\n  \n  // Problem Attempts\n  createProblemAttempt(attempt: InsertProblemAttempt): Promise<ProblemAttempt>;\n  getSessionAttempts(sessionId: string): Promise<ProblemAttempt[]>;\n  \n  // Student Goals\n  createStudentGoal(goal: InsertStudentGoal): Promise<StudentGoal>;\n  updateStudentGoal(id: string, userId: string, updates: Partial<StudentGoal>): Promise<StudentGoal | undefined>;\n  getStudentGoals(studentId: string, userId: string): Promise<StudentGoal[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n  \n  // Students\n  async createStudent(insertStudent: InsertStudent): Promise<Student> {\n    const [student] = await db\n      .insert(students)\n      .values(insertStudent)\n      .returning();\n    return student;\n  }\n  \n  async getStudent(id: string, userId: string): Promise<Student | undefined> {\n    const [student] = await db.select().from(students).where(\n      and(eq(students.id, id), eq(students.userId, userId))\n    );\n    return student || undefined;\n  }\n  \n  async getStudentsByUser(userId: string): Promise<Student[]> {\n    return await db.select().from(students).where(eq(students.userId, userId));\n  }\n  \n  // Problems\n  async createProblem(insertProblem: InsertProblem): Promise<Problem> {\n    const [problem] = await db\n      .insert(problems)\n      .values(insertProblem)\n      .returning();\n    return problem;\n  }\n  \n  async getProblems(type?: 'sprint' | 'target' | 'numbersense' | 'team', limit = 50): Promise<Problem[]> {\n    if (type) {\n      return await db.select().from(problems).where(eq(problems.type, type)).limit(limit);\n    }\n    return await db.select().from(problems).limit(limit);\n  }\n  \n  async getProblem(id: string): Promise<Problem | undefined> {\n    const [problem] = await db.select().from(problems).where(eq(problems.id, id));\n    return problem || undefined;\n  }\n  \n  // Practice Sessions\n  async createPracticeSession(insertSession: InsertPracticeSession): Promise<PracticeSession> {\n    const [session] = await db\n      .insert(practiceSessions)\n      .values(insertSession)\n      .returning();\n    return session;\n  }\n  \n  async updatePracticeSession(id: string, userId: string, updates: Partial<PracticeSession>): Promise<PracticeSession | undefined> {\n    // First check if session belongs to user\n    const session = await this.getPracticeSession(id, userId);\n    if (!session) return undefined;\n    \n    const [updatedSession] = await db\n      .update(practiceSessions)\n      .set(updates)\n      .where(eq(practiceSessions.id, id))\n      .returning();\n    return updatedSession || undefined;\n  }\n  \n  async getPracticeSession(id: string, userId: string): Promise<PracticeSession | undefined> {\n    const [session] = await db\n      .select()\n      .from(practiceSessions)\n      .innerJoin(students, eq(practiceSessions.studentId, students.id))\n      .where(\n        and(\n          eq(practiceSessions.id, id),\n          eq(students.userId, userId)\n        )\n      );\n    return session?.practice_sessions || undefined;\n  }\n  \n  async getStudentSessions(studentId: string, userId: string, limit = 20): Promise<PracticeSession[]> {\n    const sessions = await db\n      .select()\n      .from(practiceSessions)\n      .innerJoin(students, eq(practiceSessions.studentId, students.id))\n      .where(\n        and(\n          eq(practiceSessions.studentId, studentId),\n          eq(students.userId, userId)\n        )\n      )\n      .orderBy(desc(practiceSessions.startedAt))\n      .limit(limit);\n    return sessions.map(s => s.practice_sessions);\n  }\n  \n  // Problem Attempts\n  async createProblemAttempt(insertAttempt: InsertProblemAttempt): Promise<ProblemAttempt> {\n    const [attempt] = await db\n      .insert(problemAttempts)\n      .values(insertAttempt)\n      .returning();\n    return attempt;\n  }\n  \n  async getSessionAttempts(sessionId: string): Promise<ProblemAttempt[]> {\n    return await db\n      .select()\n      .from(problemAttempts)\n      .where(eq(problemAttempts.sessionId, sessionId));\n  }\n  \n  // Student Goals\n  async createStudentGoal(insertGoal: InsertStudentGoal): Promise<StudentGoal> {\n    const [goal] = await db\n      .insert(studentGoals)\n      .values(insertGoal)\n      .returning();\n    return goal;\n  }\n  \n  async updateStudentGoal(id: string, userId: string, updates: Partial<StudentGoal>): Promise<StudentGoal | undefined> {\n    // First verify the goal belongs to a student owned by the user\n    const goals = await db\n      .select({ goalId: studentGoals.id })\n      .from(studentGoals)\n      .innerJoin(students, eq(studentGoals.studentId, students.id))\n      .where(\n        and(\n          eq(studentGoals.id, id),\n          eq(students.userId, userId)\n        )\n      );\n    \n    if (goals.length === 0) return undefined;\n    \n    const [goal] = await db\n      .update(studentGoals)\n      .set(updates)\n      .where(eq(studentGoals.id, id))\n      .returning();\n    return goal || undefined;\n  }\n  \n  async getStudentGoals(studentId: string, userId: string): Promise<StudentGoal[]> {\n    const goals = await db\n      .select()\n      .from(studentGoals)\n      .innerJoin(students, eq(studentGoals.studentId, students.id))\n      .where(\n        and(\n          eq(studentGoals.studentId, studentId),\n          eq(students.userId, userId)\n        )\n      );\n    return goals.map(g => g.student_goals);\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":7423},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, jsonb, boolean, pgEnum } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Enums\nexport const roundTypeEnum = pgEnum('round_type', ['sprint', 'target', 'numbersense', 'team']);\nexport const goalTypeEnum = pgEnum('goal_type', ['composite_score', 'accuracy', 'speed']);\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  passwordHash: text(\"password_hash\").notNull(),\n});\n\n// Students table\nexport const students = pgTable(\"students\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  name: text(\"name\").notNull(),\n  parentEmail: text(\"parent_email\"),\n  gradeLevel: integer(\"grade_level\").notNull().default(4),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Math problems table\nexport const problems = pgTable(\"problems\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  type: roundTypeEnum(\"type\").notNull(),\n  prompt: text(\"prompt\").notNull(),\n  answer: text(\"answer\").notNull(),\n  choices: jsonb(\"choices\"), // Array of choices for multiple choice\n  difficulty: integer(\"difficulty\").notNull().default(3), // 1-5 scale\n  tags: jsonb(\"tags\").notNull().default(sql`'[]'::jsonb`), // Array of topic tags\n  source: text(\"source\"), // Where problem came from\n  isGenerated: boolean(\"is_generated\").notNull().default(false), // AI generated or manual\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Practice sessions table\nexport const practiceSessions = pgTable(\"practice_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").notNull().references(() => students.id),\n  roundType: roundTypeEnum(\"round_type\").notNull(),\n  startedAt: timestamp(\"started_at\").defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n  totalQuestions: integer(\"total_questions\").notNull(),\n  correctAnswers: integer(\"correct_answers\").notNull().default(0),\n  score: integer(\"score\").notNull().default(0), // Final calculated score\n  timeSpent: integer(\"time_spent\"), // seconds\n  settings: jsonb(\"settings\").default(sql`'{}'::jsonb`), // Session configuration\n});\n\n// Individual problem attempts table\nexport const problemAttempts = pgTable(\"problem_attempts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: varchar(\"session_id\").notNull().references(() => practiceSessions.id),\n  problemId: varchar(\"problem_id\").notNull().references(() => problems.id),\n  studentAnswer: text(\"student_answer\"),\n  isCorrect: boolean(\"is_correct\").notNull().default(false),\n  timeSpent: integer(\"time_spent\"), // seconds for this problem\n  hintsUsed: integer(\"hints_used\").notNull().default(0),\n  attemptedAt: timestamp(\"attempted_at\").defaultNow(),\n});\n\n// Student goals table\nexport const studentGoals = pgTable(\"student_goals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").notNull().references(() => students.id),\n  goalType: goalTypeEnum(\"goal_type\").notNull(),\n  targetValue: integer(\"target_value\").notNull(),\n  currentValue: integer(\"current_value\").notNull().default(0),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  students: many(students),\n}));\n\nexport const studentsRelations = relations(students, ({ one, many }) => ({\n  user: one(users, {\n    fields: [students.userId],\n    references: [users.id],\n  }),\n  practiceSessions: many(practiceSessions),\n  goals: many(studentGoals),\n}));\n\nexport const practiceSessionsRelations = relations(practiceSessions, ({ one, many }) => ({\n  student: one(students, {\n    fields: [practiceSessions.studentId],\n    references: [students.id],\n  }),\n  problemAttempts: many(problemAttempts),\n}));\n\nexport const problemAttemptsRelations = relations(problemAttempts, ({ one }) => ({\n  session: one(practiceSessions, {\n    fields: [problemAttempts.sessionId],\n    references: [practiceSessions.id],\n  }),\n  problem: one(problems, {\n    fields: [problemAttempts.problemId],\n    references: [problems.id],\n  }),\n}));\n\nexport const studentGoalsRelations = relations(studentGoals, ({ one }) => ({\n  student: one(students, {\n    fields: [studentGoals.studentId],\n    references: [students.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  passwordHash: true,\n});\n\nexport const insertStudentSchema = createInsertSchema(students).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProblemSchema = createInsertSchema(problems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPracticeSessionSchema = createInsertSchema(practiceSessions).omit({\n  id: true,\n  startedAt: true,\n});\n\nexport const insertProblemAttemptSchema = createInsertSchema(problemAttempts).omit({\n  id: true,\n  attemptedAt: true,\n});\n\nexport const insertStudentGoalSchema = createInsertSchema(studentGoals).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type Student = typeof students.$inferSelect;\nexport type InsertStudent = z.infer<typeof insertStudentSchema>;\nexport type Problem = typeof problems.$inferSelect;\nexport type InsertProblem = z.infer<typeof insertProblemSchema>;\nexport type PracticeSession = typeof practiceSessions.$inferSelect;\nexport type InsertPracticeSession = z.infer<typeof insertPracticeSessionSchema>;\nexport type ProblemAttempt = typeof problemAttempts.$inferSelect;\nexport type InsertProblemAttempt = z.infer<typeof insertProblemAttemptSchema>;\nexport type StudentGoal = typeof studentGoals.$inferSelect;\nexport type InsertStudentGoal = z.infer<typeof insertStudentGoalSchema>;\n","size_bytes":6115},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/Home\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":729},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 45 4% 96%;\n\n  --foreground: 45 8% 18%;\n\n  --border: 45 6% 88%;\n\n  --card: 45 4% 94%;\n\n  --card-foreground: 45 8% 18%;\n\n  --card-border: 45 6% 85%;\n\n  --sidebar: 45 4% 91%;\n\n  --sidebar-foreground: 45 8% 18%;\n\n  --sidebar-border: 45 6% 82%;\n\n  --sidebar-primary: 25 40% 60%;\n\n  --sidebar-primary-foreground: 25 15% 95%;\n\n  --sidebar-accent: 45 6% 86%;\n\n  --sidebar-accent-foreground: 45 8% 18%;\n\n  --sidebar-ring: 25 40% 60%;\n\n  --popover: 45 5% 88%;\n\n  --popover-foreground: 45 8% 18%;\n\n  --popover-border: 45 6% 78%;\n\n  --primary: 25 40% 60%;\n\n  --primary-foreground: 25 15% 95%;\n\n  --secondary: 45 5% 84%;\n\n  --secondary-foreground: 45 8% 18%;\n\n  --muted: 45 6% 90%;\n\n  --muted-foreground: 45 12% 48%;\n\n  --accent: 180 18% 82%;\n\n  --accent-foreground: 180 25% 25%;\n\n  --destructive: 15 40% 58%;\n\n  --destructive-foreground: 15 15% 95%;\n\n  --input: 45 8% 78%;\n  --ring: 25 40% 60%;\n  --chart-1: 25 40% 55%;\n  --chart-2: 180 30% 45%;\n  --chart-3: 140 35% 50%;\n  --chart-4: 45 50% 58%;\n  --chart-5: 280 25% 55%;\n\n  --font-sans: Poppins, sans-serif;\n  --font-serif: Inter, sans-serif;\n  --font-mono: JetBrains Mono, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(45 8% 18% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(45 8% 18% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(45 8% 18% / 0.00), 0px 1px 2px -1px hsl(45 8% 18% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(45 8% 18% / 0.00), 0px 1px 2px -1px hsl(45 8% 18% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(45 8% 18% / 0.00), 0px 2px 4px -1px hsl(45 8% 18% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(45 8% 18% / 0.00), 0px 4px 6px -1px hsl(45 8% 18% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(45 8% 18% / 0.00), 0px 8px 10px -1px hsl(45 8% 18% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(45 8% 18% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 25 6% 12%;\n\n  --foreground: 25 8% 88%;\n\n  --border: 25 6% 20%;\n\n  --card: 25 6% 15%;\n\n  --card-foreground: 25 8% 88%;\n\n  --card-border: 25 6% 22%;\n\n  --sidebar: 25 6% 18%;\n\n  --sidebar-foreground: 25 8% 88%;\n\n  --sidebar-border: 25 6% 25%;\n\n  --sidebar-primary: 35 45% 65%;\n\n  --sidebar-primary-foreground: 35 15% 95%;\n\n  --sidebar-accent: 25 6% 22%;\n\n  --sidebar-accent-foreground: 25 8% 88%;\n\n  --sidebar-ring: 35 45% 65%;\n\n  --popover: 25 6% 22%;\n\n  --popover-foreground: 25 8% 88%;\n\n  --popover-border: 25 6% 28%;\n\n  --primary: 35 45% 65%;\n\n  --primary-foreground: 35 15% 95%;\n\n  --secondary: 25 6% 26%;\n\n  --secondary-foreground: 25 8% 88%;\n\n  --muted: 25 6% 20%;\n\n  --muted-foreground: 25 12% 65%;\n\n  --accent: 180 15% 25%;\n\n  --accent-foreground: 180 25% 85%;\n\n  --destructive: 15 40% 58%;\n\n  --destructive-foreground: 15 15% 95%;\n\n  --input: 25 8% 32%;\n  --ring: 35 45% 65%;\n  --chart-1: 35 45% 70%;\n  --chart-2: 180 25% 70%;\n  --chart-3: 140 30% 75%;\n  --chart-4: 45 45% 75%;\n  --chart-5: 280 20% 75%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(25 8% 88% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(25 8% 88% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(25 8% 88% / 0.00), 0px 1px 2px -1px hsl(25 8% 88% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(25 8% 88% / 0.00), 0px 1px 2px -1px hsl(25 8% 88% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(25 8% 88% / 0.00), 0px 2px 4px -1px hsl(25 8% 88% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(25 8% 88% / 0.00), 0px 4px 6px -1px hsl(25 8% 88% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(25 8% 88% / 0.00), 0px 8px 10px -1px hsl(25 8% 88% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(25 8% 88% / 0.00);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9747},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/GoalsCard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport hedgehogImage from \"@assets/generated_images/Hedgehog_teacher_character_ad6d59a4.png\";\n\ninterface Goal {\n  title: string;\n  current: number;\n  target: number;\n  color: string;\n}\n\ninterface GoalsCardProps {\n  goals: Goal[];\n}\n\nexport default function GoalsCard({ goals }: GoalsCardProps) {\n  return (\n    <Card data-testid=\"card-goals\">\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"text-lg\">Your goals</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {goals.map((goal, index) => (\n          <div key={index} className=\"space-y-2\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm font-medium text-card-foreground\">{goal.title}</span>\n              <span className=\"text-xs text-muted-foreground\">\n                {goal.current}/{goal.target}\n              </span>\n            </div>\n            <Progress \n              value={(goal.current / goal.target) * 100} \n              className=\"h-2\"\n              data-testid={`progress-${goal.title.toLowerCase().replace(/\\s+/g, '-')}`}\n            />\n          </div>\n        ))}\n        \n        <div className=\"flex justify-center pt-4\">\n          <img \n            src={hedgehogImage} \n            alt=\"Hedgie Coach\" \n            className=\"w-20 h-20 opacity-80\"\n            data-testid=\"hedgehog-goals\"\n          />\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":1568},"client/src/components/Header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport hedgehogImage from \"@assets/generated_images/Hedgehog_teacher_character_ad6d59a4.png\";\n\nexport default function Header() {\n  return (\n    <header className=\"flex items-center justify-between p-4 bg-card border-b border-card-border\">\n      <div className=\"flex items-center gap-3\">\n        <img \n          src={hedgehogImage} \n          alt=\"Hedgie Math Coach\" \n          className=\"w-10 h-10 rounded-full\"\n          data-testid=\"hedgehog-logo\"\n        />\n        <div>\n          <h1 className=\"text-lg font-bold text-foreground\">Hedgie Math Meets Prep</h1>\n          <p className=\"text-sm text-muted-foreground\">A meet-prep coach with built-in tutoring</p>\n        </div>\n      </div>\n      \n      <div className=\"flex items-center gap-2\">\n        <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-settings\">\n          Settings\n        </Button>\n        <Button variant=\"outline\" size=\"sm\" data-testid=\"button-parent-view\">\n          Parent View\n        </Button>\n      </div>\n    </header>\n  );\n}","size_bytes":1057},"client/src/components/ParentDashboard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useState } from \"react\";\n\ninterface ParentDashboardProps {\n  childName: string;\n  compositeScore: number;\n  targetScore: number;\n  onSettingChange?: (setting: string, value: boolean) => void;\n}\n\nexport default function ParentDashboard({ childName, compositeScore, targetScore, onSettingChange }: ParentDashboardProps) {\n  const [settings, setSettings] = useState({\n    kidMode: true,\n    timerBeeps: false, \n    hintLadder: true,\n    manualEntry: true,\n    dailyGoal: true\n  });\n\n  const handleSettingChange = (setting: string, value: boolean) => {\n    setSettings(prev => ({...prev, [setting]: value}));\n    onSettingChange?.(setting, value);\n    console.log(`Setting ${setting} changed to:`, value);\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"parent-dashboard\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card data-testid=\"card-progress\">\n          <CardHeader>\n            <CardTitle>Progress toward Meet #1</CardTitle>\n            <p className=\"text-sm text-muted-foreground\">\n              Composite {compositeScore} / {targetScore}\n            </p>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Progress \n              value={(compositeScore / targetScore) * 100}\n              className=\"h-4\"\n              data-testid=\"progress-composite\"\n            />\n            \n            <div className=\"space-y-3\">\n              {[\n                { name: 'Sprint accuracy 76%', value: 76 },\n                { name: 'Target solved per pair 1.1', value: 55 },\n                { name: 'Number Sense avg +72', value: 72 }\n              ].map((metric, index) => (\n                <div key={index} className=\"space-y-1\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-card-foreground\">{metric.name}</span>\n                  </div>\n                  <Progress value={metric.value} className=\"h-2\" />\n                </div>\n              ))}\n            </div>\n            \n            <div className=\"flex items-center gap-2 pt-2\">\n              <Badge className=\"bg-green-100 text-green-800\" data-testid=\"badge-status\">\n                On Track\n              </Badge>\n              <span className=\"text-sm text-muted-foreground\">\n                Need +2.0/wk â€¢ Doing +3.1/wk\n              </span>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card data-testid=\"card-session-settings\">\n          <CardHeader>\n            <CardTitle>Session Settings</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {[\n              { key: 'kidMode', label: 'Kid Mode (big buttons)', value: settings.kidMode },\n              { key: 'timerBeeps', label: 'Timer beeps', value: settings.timerBeeps },\n              { key: 'hintLadder', label: 'Hint ladder (3 steps)', value: settings.hintLadder },\n              { key: 'manualEntry', label: 'Manual entry (personal use)', value: settings.manualEntry },\n              { key: 'dailyGoal', label: 'Daily goal: 15 min', value: settings.dailyGoal }\n            ].map((setting) => (\n              <div key={setting.key} className=\"flex items-center justify-between\">\n                <label className=\"text-sm text-card-foreground cursor-pointer\">\n                  {setting.label}\n                </label>\n                <Switch\n                  checked={setting.value}\n                  onCheckedChange={(value) => handleSettingChange(setting.key, value)}\n                  data-testid={`switch-${setting.key}`}\n                />\n              </div>\n            ))}\n            \n            <div className=\"pt-4\">\n              <Button \n                variant=\"outline\" \n                className=\"w-full\"\n                data-testid=\"button-download-report\"\n                onClick={() => console.log('Download weekly report')}\n              >\n                Download weekly report (PDF)\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":4338},"client/src/components/PracticeCalendar.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface CalendarDay {\n  day: number;\n  minutes?: number;\n  rounds?: string[];\n  isToday?: boolean;\n}\n\ninterface PracticeCalendarProps {\n  month: string;\n  days: CalendarDay[];\n}\n\nexport default function PracticeCalendar({ month, days }: PracticeCalendarProps) {\n  const roundColors = {\n    'NS': 'bg-green-100 text-green-800',\n    'SP': 'bg-blue-100 text-blue-800', \n    'TG': 'bg-yellow-100 text-yellow-800',\n    'TM': 'bg-purple-100 text-purple-800'\n  };\n\n  return (\n    <Card data-testid=\"card-practice-calendar\">\n      <CardHeader>\n        <CardTitle className=\"text-lg\">{month} â€” minutes & round chips</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-7 gap-1 mb-4\">\n          {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (\n            <div key={day} className=\"text-center text-sm font-medium text-muted-foreground p-2\">\n              {day}\n            </div>\n          ))}\n        </div>\n        \n        <div className=\"grid grid-cols-7 gap-1\">\n          {days.map((dayData, index) => (\n            <div \n              key={index} \n              className={`min-h-16 p-2 border rounded-lg ${\n                dayData.isToday ? 'border-primary bg-primary/5' : 'border-border'\n              }`}\n              data-testid={`calendar-day-${dayData.day}`}\n            >\n              <div className=\"text-sm font-medium text-card-foreground mb-1\">\n                {dayData.day}\n              </div>\n              {dayData.minutes && (\n                <div className=\"text-xs text-muted-foreground mb-1\">\n                  {dayData.minutes}m\n                </div>\n              )}\n              <div className=\"flex flex-wrap gap-1\">\n                {dayData.rounds?.map((round, i) => (\n                  <Badge \n                    key={i} \n                    className={`text-xs px-1 py-0 ${roundColors[round as keyof typeof roundColors]}`}\n                    data-testid={`badge-round-${round}`}\n                  >\n                    {round}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":2297},"client/src/components/ProblemBankManager.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useState } from \"react\";\n\ninterface Problem {\n  id: string;\n  type: string;\n  prompt: string;\n  answer: string;\n  tags: string[];\n}\n\ninterface ProblemBankManagerProps {\n  problems: Problem[];\n  onAddProblem?: (problem: Partial<Problem>) => void;\n}\n\nexport default function ProblemBankManager({ problems, onAddProblem }: ProblemBankManagerProps) {\n  const [newProblem, setNewProblem] = useState({\n    type: '',\n    prompt: '',\n    answer: '',\n    tags: '',\n    source: '',\n    difficulty: ''\n  });\n\n  const handleAddProblem = () => {\n    onAddProblem?.({\n      ...newProblem,\n      tags: newProblem.tags.split(',').map(tag => tag.trim())\n    });\n    console.log('Adding problem:', newProblem);\n    setNewProblem({ type: '', prompt: '', answer: '', tags: '', source: '', difficulty: '' });\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\" data-testid=\"problem-bank-manager\">\n      <Card data-testid=\"card-add-problems\">\n        <CardHeader>\n          <CardTitle>Add new problems</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <label className=\"text-sm font-medium text-card-foreground\">Type</label>\n            <Select onValueChange={(value) => setNewProblem({...newProblem, type: value})}>\n              <SelectTrigger data-testid=\"select-problem-type\">\n                <SelectValue placeholder=\"Number Sense / Sprint / Target / Team\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"number-sense\">Number Sense</SelectItem>\n                <SelectItem value=\"sprint\">Sprint</SelectItem>\n                <SelectItem value=\"target\">Target</SelectItem>\n                <SelectItem value=\"team\">Team</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div>\n            <label className=\"text-sm font-medium text-card-foreground\">Source</label>\n            <Input \n              placeholder=\"Book page / PDF / URL / Manual\"\n              value={newProblem.source}\n              onChange={(e) => setNewProblem({...newProblem, source: e.target.value})}\n              data-testid=\"input-source\"\n            />\n          </div>\n          \n          <div>\n            <label className=\"text-sm font-medium text-card-foreground\">Difficulty</label>\n            <Input \n              placeholder=\"1-5\"\n              value={newProblem.difficulty}\n              onChange={(e) => setNewProblem({...newProblem, difficulty: e.target.value})}\n              data-testid=\"input-difficulty\"\n            />\n          </div>\n          \n          <div>\n            <label className=\"text-sm font-medium text-card-foreground\">Topic tags</label>\n            <Input \n              placeholder=\"fractions, ratios, geometry...\"\n              value={newProblem.tags}\n              onChange={(e) => setNewProblem({...newProblem, tags: e.target.value})}\n              data-testid=\"input-tags\"\n            />\n          </div>\n          \n          <div className=\"border rounded-lg p-4 min-h-24 bg-muted/50\">\n            <p className=\"text-sm text-muted-foreground mb-2\">Drag & drop images/PDFs or paste text</p>\n            <Input \n              placeholder=\"Problem text...\"\n              value={newProblem.prompt}\n              onChange={(e) => setNewProblem({...newProblem, prompt: e.target.value})}\n              data-testid=\"input-problem-text\"\n            />\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button \n              variant=\"outline\" \n              data-testid=\"button-upload\"\n              onClick={() => console.log('Upload clicked')}\n            >\n              Upload\n            </Button>\n          </div>\n          \n          <div className=\"flex gap-2 pt-2\">\n            <Button \n              onClick={handleAddProblem}\n              disabled={!newProblem.type || !newProblem.prompt}\n              data-testid=\"button-add-problem\"\n            >\n              Add\n            </Button>\n            <Button \n              variant=\"outline\" \n              data-testid=\"button-save-draft\"\n              onClick={() => console.log('Save draft clicked')}\n            >\n              Save draft\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n      \n      <Card data-testid=\"card-problems-list\">\n        <CardHeader>\n          <CardTitle>Problems</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {problems.map((problem) => (\n              <div \n                key={problem.id} \n                className=\"border rounded-lg p-3 hover-elevate cursor-pointer\"\n                data-testid={`problem-item-${problem.id}`}\n                onClick={() => console.log('Problem selected:', problem.id)}\n              >\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-sm font-medium\">{problem.id}</span>\n                    <Badge variant=\"outline\">{problem.type}</Badge>\n                  </div>\n                  <span className=\"text-sm text-muted-foreground\">{problem.answer}</span>\n                </div>\n                <p className=\"text-sm text-card-foreground truncate\">{problem.prompt}</p>\n                <div className=\"flex flex-wrap gap-1 mt-2\">\n                  {problem.tags.map((tag, i) => (\n                    <Badge key={i} variant=\"secondary\" className=\"text-xs\">{tag}</Badge>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5997},"client/src/components/ProblemInterface.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useState } from \"react\";\n\ninterface ProblemInterfaceProps {\n  roundType: 'sprint' | 'target' | 'numbersense' | 'team';\n  problem: {\n    id: string;\n    text: string;\n    choices?: string[];\n    type: 'multiple_choice' | 'numerical';\n  };\n  onAnswer: (answer: string) => void;\n  showHint?: boolean;\n  onHint?: () => void;\n}\n\nexport default function ProblemInterface({ roundType, problem, onAnswer, showHint, onHint }: ProblemInterfaceProps) {\n  const [selectedAnswer, setSelectedAnswer] = useState<string>('');\n  const [numericalAnswer, setNumericalAnswer] = useState<string>('');\n\n  const handleSubmit = () => {\n    const answer = problem.type === 'multiple_choice' ? selectedAnswer : numericalAnswer;\n    onAnswer(answer);\n    console.log(`Submitted answer: ${answer}`);\n  };\n\n  const roundColors = {\n    sprint: 'border-l-4 border-l-orange-400',\n    target: 'border-l-4 border-l-blue-400',\n    numbersense: 'border-l-4 border-l-green-400', \n    team: 'border-l-4 border-l-purple-400'\n  };\n\n  return (\n    <Card className={`${roundColors[roundType]}`} data-testid=\"card-problem\">\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center justify-between\">\n          <Badge variant=\"outline\" data-testid=\"badge-round-type\">\n            {roundType.charAt(0).toUpperCase() + roundType.slice(1)}\n          </Badge>\n          <div className=\"flex gap-2\">\n            {showHint && (\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                data-testid=\"button-hint\"\n                onClick={onHint || (() => console.log('Hint requested'))}\n              >\n                Hint\n              </Button>\n            )}\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              data-testid=\"button-next\"\n              onClick={() => console.log('Next problem')}\n            >\n              Next â†’\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-6\">\n        <div className=\"text-lg text-card-foreground\" data-testid=\"problem-text\">\n          {problem.text}\n        </div>\n        \n        {problem.type === 'multiple_choice' ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n            {problem.choices?.map((choice, index) => {\n              const letter = String.fromCharCode(65 + index);\n              return (\n                <Button\n                  key={index}\n                  variant={selectedAnswer === letter ? \"default\" : \"outline\"}\n                  className=\"text-left justify-start h-auto p-4 hover-elevate\"\n                  onClick={() => setSelectedAnswer(letter)}\n                  data-testid={`button-choice-${letter}`}\n                >\n                  <span className=\"font-semibold mr-2\">{letter}.</span>\n                  {choice}\n                </Button>\n              );\n            })}\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            <Input\n              type=\"text\"\n              placeholder=\"Answer (simplest form)\"\n              value={numericalAnswer}\n              onChange={(e) => setNumericalAnswer(e.target.value)}\n              className=\"text-lg\"\n              data-testid=\"input-numerical-answer\"\n            />\n            {roundType === 'numbersense' && (\n              <div className=\"text-xs text-muted-foreground\">\n                Estimation â†’ integer only\n              </div>\n            )}\n          </div>\n        )}\n        \n        <div className=\"flex justify-end\">\n          <Button \n            onClick={handleSubmit}\n            disabled={problem.type === 'multiple_choice' ? !selectedAnswer : !numericalAnswer}\n            data-testid=\"button-submit-answer\"\n          >\n            Submit Answer\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4070},"client/src/components/RoundCard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface RoundCardProps {\n  title: string;\n  description: string;\n  duration: string;\n  calcAllowed: boolean;\n  color: 'orange' | 'blue' | 'green' | 'purple';\n  onClick?: () => void;\n}\n\nexport default function RoundCard({ title, description, duration, calcAllowed, color, onClick }: RoundCardProps) {\n  const colorClasses = {\n    orange: 'border-l-4 border-l-orange-400',\n    blue: 'border-l-4 border-l-blue-400', \n    green: 'border-l-4 border-l-green-400',\n    purple: 'border-l-4 border-l-purple-400'\n  };\n\n  const badgeColors = {\n    orange: 'bg-orange-100 text-orange-800',\n    blue: 'bg-blue-100 text-blue-800',\n    green: 'bg-green-100 text-green-800', \n    purple: 'bg-purple-100 text-purple-800'\n  };\n\n  return (\n    <Card \n      className={`hover-elevate cursor-pointer transition-all ${colorClasses[color]}`}\n      onClick={onClick}\n      data-testid={`card-round-${title.toLowerCase().replace(' ', '-')}`}\n    >\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h3 className=\"text-xl font-semibold text-card-foreground\">{title}</h3>\n          <Badge \n            className={`${badgeColors[color]} ${calcAllowed ? '' : 'opacity-70'}`}\n            data-testid={`badge-calc-${calcAllowed ? 'ok' : 'no'}`}\n          >\n            {calcAllowed ? 'Calc OK' : 'No Calc'}\n          </Badge>\n        </div>\n        <p className=\"text-muted-foreground mb-4\">{description}</p>\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm font-medium text-card-foreground\">{duration}</span>\n          <Button size=\"sm\" data-testid={`button-start-${title.toLowerCase().replace(' ', '-')}`}>\n            Start Practice\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":1943},"client/src/components/ScoreCard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\n\ninterface ScoreCardProps {\n  title: string;\n  score: number;\n  maxScore: number;\n  color: string;\n  subtitle?: string;\n}\n\nexport default function ScoreCard({ title, score, maxScore, color, subtitle }: ScoreCardProps) {\n  const percentage = (score / maxScore) * 100;\n  \n  const colorClasses = {\n    blue: 'bg-blue-100',\n    yellow: 'bg-yellow-100', \n    green: 'bg-green-100',\n    purple: 'bg-purple-100'\n  };\n\n  return (\n    <Card data-testid={`card-score-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n      <CardHeader className=\"pb-2\">\n        <CardTitle className=\"text-base font-medium\">{title}</CardTitle>\n        {subtitle && <p className=\"text-xs text-muted-foreground\">{subtitle}</p>}\n      </CardHeader>\n      <CardContent>\n        <div className=\"flex items-center justify-between mb-3\">\n          <span className=\"text-2xl font-bold text-card-foreground\">{score}</span>\n          <span className=\"text-lg text-muted-foreground\">/ {maxScore}</span>\n        </div>\n        <div className=\"relative\">\n          <Progress \n            value={percentage} \n            className=\"h-3\"\n            data-testid={`progress-score-${title.toLowerCase().replace(/\\s+/g, '-')}`}\n          />\n          <div className=\"absolute inset-y-0 right-0 w-1/3 bg-gray-200 rounded-r opacity-30\"></div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":1480},"client/src/components/TeamRoleCard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface TeamRoleCardProps {\n  role: string;\n  description: string;\n  color: string;\n  isSelected?: boolean;\n  onClick?: () => void;\n}\n\nexport default function TeamRoleCard({ role, description, color, isSelected, onClick }: TeamRoleCardProps) {\n  const colorClasses = {\n    blue: 'bg-blue-100',\n    purple: 'bg-purple-100',\n    yellow: 'bg-yellow-100',\n    green: 'bg-green-100'\n  };\n\n  return (\n    <Card \n      className={`hover-elevate cursor-pointer transition-all ${\n        isSelected ? 'ring-2 ring-primary' : ''\n      }`}\n      onClick={onClick}\n      data-testid={`card-team-role-${role.toLowerCase()}`}\n    >\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h3 className=\"font-semibold text-card-foreground\">{role}</h3>\n            <p className=\"text-sm text-muted-foreground\">{description}</p>\n          </div>\n          <div className={`w-8 h-8 rounded-full ${colorClasses[color as keyof typeof colorClasses]}`}></div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":1168},"client/src/components/WeeklyReport.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface WeeklyReportProps {\n  totalMinutes: number;\n  weeklyGoal: number;\n  weekChange: number;\n  projectedScore: number;\n  targetScore: number;\n  weeksToMeet: number;\n  status: 'on-track' | 'behind' | 'ahead';\n}\n\nexport default function WeeklyReport({ \n  totalMinutes, \n  weeklyGoal, \n  weekChange, \n  projectedScore, \n  targetScore, \n  weeksToMeet, \n  status \n}: WeeklyReportProps) {\n  const statusColors = {\n    'on-track': 'bg-green-100 text-green-800',\n    'behind': 'bg-red-100 text-red-800',\n    'ahead': 'bg-blue-100 text-blue-800'\n  };\n\n  return (\n    <div className=\"space-y-4\" data-testid=\"weekly-report\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <Card data-testid=\"card-snapshot\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base\">Snapshot</CardTitle>\n            <p className=\"text-xs text-muted-foreground\">Composite Projection</p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-baseline gap-2\">\n                <span className=\"text-3xl font-bold text-card-foreground\">{totalMinutes}</span>\n                <span className=\"text-sm text-muted-foreground\">Minutes practiced this week</span>\n                <span className=\"text-sm text-green-600\">+{weekChange} vs last week</span>\n              </div>\n              <Progress \n                value={(totalMinutes / weeklyGoal) * 100} \n                className=\"h-2\"\n                data-testid=\"progress-weekly-minutes\"\n              />\n              <div className=\"text-xs text-muted-foreground\">\n                {weeklyGoal} / {weeklyGoal} min (school nights goal)\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-pacing\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base\">Pacing to Goal</CardTitle>\n            <p className=\"text-xs text-muted-foreground\">\n              Weeks to meet: {weeksToMeet} â€¢ Goal: {targetScore} â€¢ Current: {projectedScore}\n            </p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <div className=\"text-sm text-muted-foreground\">\n                Needed slope: +2.0 pts/wk â€¢ Observed: +3.1 pts/wk\n              </div>\n              <Badge className={statusColors[status]} data-testid=\"badge-status\">\n                {status === 'on-track' ? 'On Track' : status === 'behind' ? 'Behind' : 'Ahead'}\n              </Badge>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n      \n      <Card data-testid=\"card-round-performance\">\n        <CardHeader>\n          <CardTitle className=\"text-base\">Round-by-round</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {[\n            { name: 'Sprint', accuracy: 76, penalty: 8, projected: '76 / 120' },\n            { name: 'Target', solved: 1.1, projected: '40 / 80' },\n            { name: 'Number Sense', average: 72, projected: '18 / 100' }\n          ].map((round, index) => (\n            <div key={index} className=\"space-y-2\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium\">\n                  {round.name} â€” {'accuracy' in round ? `accuracy ${round.accuracy}%` : \n                    'solved' in round ? `solved per pair ${round.solved}` :\n                    `avg raw +${round.average}`}\n                  {'penalty' in round && ` â€¢ penalty ${round.penalty}%`}\n                </span>\n                <span className=\"text-xs text-muted-foreground\">\n                  Projected: {round.projected}\n                </span>\n              </div>\n              <Progress \n                value={('accuracy' in round ? round.accuracy : \n                       'solved' in round ? (round.solved || 0) * 50 :\n                       'average' in round ? round.average : 0)} \n                className=\"h-2\"\n                data-testid={`progress-${round.name.toLowerCase().replace(' ', '-')}`}\n              />\n            </div>\n          ))}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4361},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Home.tsx":{"content":"import { useState } from \"react\";\nimport Header from \"@/components/Header\";\nimport RoundCard from \"@/components/RoundCard\";\nimport GoalsCard from \"@/components/GoalsCard\";\nimport PracticeCalendar from \"@/components/PracticeCalendar\";\nimport ScoreCard from \"@/components/ScoreCard\";\nimport WeeklyReport from \"@/components/WeeklyReport\";\nimport ProblemInterface from \"@/components/ProblemInterface\";\nimport PracticeSession from \"@/components/PracticeSession\";\nimport TeamRoleCard from \"@/components/TeamRoleCard\";\nimport ProblemBankManager from \"@/components/ProblemBankManager\";\nimport ParentDashboard from \"@/components/ParentDashboard\";\n\ntype ViewType = 'home' | 'practice' | 'calendar' | 'scores' | 'reports' | 'problem-bank' | 'parent';\n\nexport default function Home() {\n  const [currentView, setCurrentView] = useState<ViewType>('home');\n  const [selectedRoundType, setSelectedRoundType] = useState<'sprint' | 'target' | 'numbersense' | 'team' | null>(null);\n  \n  // todo: remove mock functionality\n  const mockGoals = [\n    { title: \"Composite to 180\", current: 156, target: 180, color: \"blue\" },\n    { title: \"Sprint accuracy 75%\", current: 68, target: 75, color: \"orange\" },\n    { title: \"Target solved per pair â‰¥1.0\", current: 0.8, target: 1.0, color: \"green\" }\n  ];\n  \n  const mockCalendarDays = [\n    { day: 1, minutes: 15, rounds: ['NS'], isToday: false },\n    { day: 2, minutes: 20, rounds: ['SP'], isToday: false },\n    { day: 3, minutes: 10, rounds: ['TG'], isToday: false },\n    { day: 4, minutes: 15, rounds: ['NS'], isToday: false },\n    { day: 5, minutes: 25, rounds: ['TM', 'SP'], isToday: true },\n    { day: 6 }, { day: 7 }, { day: 8 },\n    { day: 9, minutes: 15, rounds: ['NS'] },\n    { day: 10, minutes: 30, rounds: ['TG'] },\n    { day: 11 }, { day: 12 }, { day: 13, minutes: 15, rounds: ['NS'] },\n    { day: 14 }, { day: 15, minutes: 20, rounds: ['SP'] },\n    { day: 16, minutes: 15, rounds: ['NS'] },\n    { day: 17 }, { day: 18, minutes: 10, rounds: ['TG'] },\n    { day: 19, minutes: 15, rounds: ['NS'] },\n    { day: 20 }, { day: 21, minutes: 25, rounds: ['TM'] },\n    { day: 22, minutes: 15, rounds: ['NS'] },\n    { day: 23 }, { day: 24, minutes: 10, rounds: ['TG'] },\n    { day: 25, minutes: 15, rounds: ['NS'] },\n    { day: 26, minutes: 30, rounds: ['TG'] },\n    { day: 27 }, { day: 28, minutes: 15, rounds: ['NS'] },\n    { day: 29 }, { day: 30, minutes: 20, rounds: ['SP'] }\n  ];\n  \n  const mockProblemMC = {\n    id: '1',\n    text: 'Q1. Simplify 18/24.',\n    choices: ['2/3', '4/5', '5/8', '3/4'],\n    type: 'multiple_choice' as const\n  };\n  \n  const mockProblems = [\n    {\n      id: 'P-1021',\n      type: 'Sprint',\n      prompt: 'Simplify 18/24.',\n      answer: '2/3',\n      tags: ['fractions']\n    },\n    {\n      id: 'P-1033', \n      type: 'Target',\n      prompt: 'Two integers sum to 55. Larger?',\n      answer: '28',\n      tags: ['algebra']\n    },\n    {\n      id: 'P-0930',\n      type: 'NS',\n      prompt: '54 Ã· 0.9',\n      answer: '60', \n      tags: ['mental math']\n    },\n    {\n      id: 'P-0891',\n      type: 'Team',\n      prompt: 'Triangle area with base 8, height 5',\n      answer: '20',\n      tags: ['geometry']\n    }\n  ];\n\n  const renderContent = () => {\n    switch (currentView) {\n      case 'home':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              <div className=\"lg:col-span-2 space-y-6\">\n                <div>\n                  <h2 className=\"text-xl font-semibold text-foreground mb-4\">Let's practice!</h2>\n                  <p className=\"text-muted-foreground mb-6\">Pick a round or start a quick session.</p>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <RoundCard\n                      title=\"Number Sense\"\n                      description=\"10 min â€¢ mental math\"\n                      duration=\"10 min\"\n                      calcAllowed={false}\n                      color=\"green\"\n                      onClick={() => {\n                        setSelectedRoundType('numbersense');\n                        setCurrentView('practice');\n                      }}\n                    />\n                    <RoundCard\n                      title=\"Sprint\"\n                      description=\"40 min â€¢ 30 MC\"\n                      duration=\"40 min\"\n                      calcAllowed={false}\n                      color=\"orange\"\n                      onClick={() => {\n                        setSelectedRoundType('sprint');\n                        setCurrentView('practice');\n                      }}\n                    />\n                    <RoundCard\n                      title=\"Target\"\n                      description=\"4 pairs x 6 min\"\n                      duration=\"24 min\"\n                      calcAllowed={true}\n                      color=\"blue\"\n                      onClick={() => {\n                        setSelectedRoundType('target');\n                        setCurrentView('practice');\n                      }}\n                    />\n                    <RoundCard\n                      title=\"Team\"\n                      description=\"20 min â€¢ 10 problems\"\n                      duration=\"20 min\"\n                      calcAllowed={true}\n                      color=\"purple\"\n                      onClick={() => {\n                        setSelectedRoundType('team');\n                        setCurrentView('practice');\n                      }}\n                    />\n                  </div>\n                </div>\n              </div>\n              \n              <div>\n                <GoalsCard goals={mockGoals} />\n              </div>\n            </div>\n          </div>\n        );\n        \n      case 'practice':\n        if (!selectedRoundType) {\n          setCurrentView('home');\n          return null;\n        }\n        \n        return (\n          <PracticeSession\n            studentId={\"demo-student-id\"} // In real app, get from auth context\n            roundType={selectedRoundType}\n            onComplete={(results) => {\n              console.log('Session completed:', results);\n              // Show results or redirect\n              setSelectedRoundType(null);\n              setCurrentView('home');\n            }}\n            onCancel={() => {\n              setSelectedRoundType(null);\n              setCurrentView('home');\n            }}\n          />\n        );\n        \n      case 'calendar':\n        return (\n          <div className=\"space-y-6\">\n            <PracticeCalendar month=\"Practice Calendar\" days={mockCalendarDays} />\n          </div>\n        );\n        \n      case 'scores':\n        return (\n          <div className=\"space-y-6\">\n            <h2 className=\"text-2xl font-bold text-foreground\">Session Score Summary</h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <ScoreCard title=\"Sprint\" score={76} maxScore={120} color=\"blue\" />\n              <ScoreCard title=\"Target\" score={40} maxScore={80} color=\"yellow\" />\n              <ScoreCard title=\"Number Sense (raw)\" score={60} maxScore={100} color=\"purple\" />\n              <ScoreCard \n                title=\"Composite\" \n                score={176} \n                maxScore={300} \n                color=\"green\"\n                subtitle=\"Ties break by Sprint, then Target (item analysis). Practice uses official Mathleague rules.\"\n              />\n            </div>\n          </div>\n        );\n        \n      case 'reports':\n        return (\n          <div className=\"space-y-6\">\n            <h2 className=\"text-2xl font-bold text-foreground\">Weekly Report</h2>\n            <WeeklyReport\n              totalMinutes={186}\n              weeklyGoal={75}\n              weekChange={6}\n              projectedScore={186}\n              targetScore={200}\n              weeksToMeet={4}\n              status=\"on-track\"\n            />\n          </div>\n        );\n        \n      case 'problem-bank':\n        return (\n          <div className=\"space-y-6\">\n            <h2 className=\"text-2xl font-bold text-foreground\">Problem Bank â€” Upload & Manage</h2>\n            <ProblemBankManager \n              problems={mockProblems}\n              onAddProblem={(problem) => console.log('New problem:', problem)}\n            />\n          </div>\n        );\n        \n      case 'parent':\n        return (\n          <div className=\"space-y-6\">\n            <h2 className=\"text-2xl font-bold text-foreground\">Parent View â€” On-pace</h2>\n            <ParentDashboard\n              childName=\"Alex\"\n              compositeScore={186}\n              targetScore={300}\n              onSettingChange={(setting, value) => console.log(`${setting}: ${value}`)}\n            />\n          </div>\n        );\n        \n      default:\n        return null;\n    }\n  };\n\n  const navItems = [\n    { key: 'home', label: 'Home' },\n    { key: 'practice', label: 'Practice' },\n    { key: 'calendar', label: 'Calendar' },\n    { key: 'scores', label: 'Scores' },\n    { key: 'reports', label: 'Reports' },\n    { key: 'problem-bank', label: 'Problem Bank' },\n    { key: 'parent', label: 'Parent View' }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      {/* Navigation */}\n      <nav className=\"bg-card border-b border-card-border\">\n        <div className=\"max-w-7xl mx-auto px-4\">\n          <div className=\"flex space-x-1 py-3\">\n            {navItems.map((item) => (\n              <button\n                key={item.key}\n                onClick={() => setCurrentView(item.key as ViewType)}\n                className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors hover-elevate ${\n                  currentView === item.key\n                    ? 'bg-primary text-primary-foreground'\n                    : 'text-muted-foreground hover:text-card-foreground'\n                }`}\n                data-testid={`nav-${item.key}`}\n              >\n                {item.label}\n              </button>\n            ))}\n          </div>\n        </div>\n      </nav>\n      \n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 py-6\">\n        {renderContent()}\n      </main>\n    </div>\n  );\n}","size_bytes":10165},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/GoalsCard.tsx":{"content":"import GoalsCard from '../GoalsCard';\n\nexport default function GoalsCardExample() {\n  // todo: remove mock functionality\n  const mockGoals = [\n    { title: \"Composite to 180\", current: 156, target: 180, color: \"blue\" },\n    { title: \"Sprint accuracy 75%\", current: 68, target: 75, color: \"orange\" },\n    { title: \"Target solved per pair â‰¥1.0\", current: 0.8, target: 1.0, color: \"green\" }\n  ];\n\n  return <GoalsCard goals={mockGoals} />;\n}","size_bytes":439},"client/src/components/examples/Header.tsx":{"content":"import Header from '../Header';\n\nexport default function HeaderExample() {\n  return <Header />;\n}","size_bytes":97},"client/src/components/examples/ParentDashboard.tsx":{"content":"import ParentDashboard from '../ParentDashboard';\n\nexport default function ParentDashboardExample() {\n  // todo: remove mock functionality\n  return (\n    <div className=\"p-4\">\n      <ParentDashboard\n        childName=\"Alex\"\n        compositeScore={186}\n        targetScore={300}\n        onSettingChange={(setting, value) => console.log(`${setting}: ${value}`)}\n      />\n    </div>\n  );\n}","size_bytes":387},"client/src/components/examples/PracticeCalendar.tsx":{"content":"import PracticeCalendar from '../PracticeCalendar';\n\nexport default function PracticeCalendarExample() {\n  // todo: remove mock functionality\n  const mockDays = [\n    { day: 1, minutes: 15, rounds: ['NS'], isToday: false },\n    { day: 2, minutes: 20, rounds: ['SP'], isToday: false },\n    { day: 3, minutes: 10, rounds: ['TG'], isToday: false },\n    { day: 4, minutes: 15, rounds: ['NS'], isToday: false },\n    { day: 5, minutes: 25, rounds: ['TM', 'SP'], isToday: true },\n    { day: 6 }, { day: 7 }, { day: 8 },\n    { day: 9, minutes: 15, rounds: ['NS'] },\n    { day: 10, minutes: 30, rounds: ['TG'] },\n    { day: 11 }, { day: 12 },\n    { day: 13, minutes: 15, rounds: ['NS'] },\n    { day: 14 }, { day: 15, minutes: 20, rounds: ['SP'] },\n    { day: 16, minutes: 15, rounds: ['NS'] },\n    { day: 17 }, { day: 18, minutes: 10, rounds: ['TG'] },\n    { day: 19, minutes: 15, rounds: ['NS'] },\n    { day: 20 }, { day: 21, minutes: 25, rounds: ['TM'] },\n    { day: 22, minutes: 15, rounds: ['NS'] },\n    { day: 23 }, { day: 24, minutes: 10, rounds: ['TG'] },\n    { day: 25, minutes: 15, rounds: ['NS'] },\n    { day: 26, minutes: 30, rounds: ['TG'] },\n    { day: 27 }, { day: 28, minutes: 15, rounds: ['NS'] },\n    { day: 29 }, { day: 30, minutes: 20, rounds: ['SP'] }\n  ];\n\n  return <PracticeCalendar month=\"Practice Calendar\" days={mockDays} />;\n}","size_bytes":1343},"client/src/components/examples/ProblemBankManager.tsx":{"content":"import ProblemBankManager from '../ProblemBankManager';\n\nexport default function ProblemBankManagerExample() {\n  // todo: remove mock functionality\n  const mockProblems = [\n    {\n      id: 'P-1021',\n      type: 'Sprint',\n      prompt: 'Simplify 18/24.',\n      answer: '2/3',\n      tags: ['fractions']\n    },\n    {\n      id: 'P-1033', \n      type: 'Target',\n      prompt: 'Two integers sum to 55. Larger?',\n      answer: '28',\n      tags: ['algebra']\n    },\n    {\n      id: 'P-0930',\n      type: 'NS',\n      prompt: '54 Ã· 0.9',\n      answer: '60', \n      tags: ['mental math']\n    },\n    {\n      id: 'P-0891',\n      type: 'Team',\n      prompt: 'Triangle area with base 8, height 5',\n      answer: '20',\n      tags: ['geometry']\n    }\n  ];\n\n  return (\n    <div className=\"p-4\">\n      <ProblemBankManager \n        problems={mockProblems}\n        onAddProblem={(problem) => console.log('New problem:', problem)}\n      />\n    </div>\n  );\n}","size_bytes":935},"client/src/components/examples/ProblemInterface.tsx":{"content":"import ProblemInterface from '../ProblemInterface';\n\nexport default function ProblemInterfaceExample() {\n  // todo: remove mock functionality\n  const mockProblemMC = {\n    id: '1',\n    text: 'Q1. Simplify 18/24.',\n    choices: ['2/3', '4/5', '5/8', '3/4'],\n    type: 'multiple_choice' as const\n  };\n\n  const mockProblemNum = {\n    id: '2', \n    text: 'Q8. 54 Ã· 0.9 = ?',\n    type: 'numerical' as const\n  };\n\n  return (\n    <div className=\"space-y-6 p-4\">\n      <ProblemInterface\n        roundType=\"sprint\"\n        problem={mockProblemMC}\n        onAnswer={(answer) => console.log('Sprint answer:', answer)}\n        showHint={true}\n      />\n      \n      <ProblemInterface\n        roundType=\"numbersense\"\n        problem={mockProblemNum}\n        onAnswer={(answer) => console.log('Number Sense answer:', answer)}\n        showHint={false}\n      />\n    </div>\n  );\n}","size_bytes":863},"client/src/components/examples/RoundCard.tsx":{"content":"import RoundCard from '../RoundCard';\n\nexport default function RoundCardExample() {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 p-4\">\n      <RoundCard\n        title=\"Number Sense\"\n        description=\"10 min â€¢ mental math\"\n        duration=\"10 min\"\n        calcAllowed={false}\n        color=\"green\"\n        onClick={() => console.log('Number Sense clicked')}\n      />\n      <RoundCard\n        title=\"Sprint\"\n        description=\"40 min â€¢ 30 MC\"\n        duration=\"40 min\"\n        calcAllowed={false}\n        color=\"orange\"\n        onClick={() => console.log('Sprint clicked')}\n      />\n      <RoundCard\n        title=\"Target\"\n        description=\"4 pairs x 6 min\"\n        duration=\"24 min\"\n        calcAllowed={true}\n        color=\"blue\"\n        onClick={() => console.log('Target clicked')}\n      />\n      <RoundCard\n        title=\"Team\"\n        description=\"20 min â€¢ 10 problems\"\n        duration=\"20 min\"\n        calcAllowed={true}\n        color=\"purple\"\n        onClick={() => console.log('Team clicked')}\n      />\n    </div>\n  );\n}","size_bytes":1066},"client/src/components/examples/ScoreCard.tsx":{"content":"import ScoreCard from '../ScoreCard';\n\nexport default function ScoreCardExample() {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 p-4\">\n      <ScoreCard\n        title=\"Sprint\"\n        score={76}\n        maxScore={120}\n        color=\"blue\"\n      />\n      <ScoreCard\n        title=\"Target\"\n        score={40}\n        maxScore={80}\n        color=\"yellow\"\n      />\n      <ScoreCard\n        title=\"Number Sense (raw)\"\n        score={60}\n        maxScore={100}\n        color=\"purple\"\n      />\n      <ScoreCard\n        title=\"Composite\"\n        score={176}\n        maxScore={300}\n        color=\"green\"\n        subtitle=\"Ties break by Sprint, then Target (item analysis). Practice uses official Mathleague rules.\"\n      />\n    </div>\n  );\n}","size_bytes":770},"client/src/components/examples/TeamRoleCard.tsx":{"content":"import TeamRoleCard from '../TeamRoleCard';\nimport { useState } from 'react';\n\nexport default function TeamRoleCardExample() {\n  const [selectedRole, setSelectedRole] = useState<string>('');\n  \n  // todo: remove mock functionality\n  const roles = [\n    { role: 'Starter', description: 'Grabs strengths first', color: 'blue' },\n    { role: 'Scribe', description: 'Records clean answers', color: 'purple' },\n    { role: 'Checker', description: 'Verifies & simplifies', color: 'yellow' },\n    { role: 'Timekeeper', description: 'Calls 2-min check', color: 'green' }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 p-4\">\n      {roles.map((roleData, index) => (\n        <TeamRoleCard\n          key={index}\n          role={roleData.role}\n          description={roleData.description}\n          color={roleData.color}\n          isSelected={selectedRole === roleData.role}\n          onClick={() => {\n            setSelectedRole(roleData.role);\n            console.log(`Selected role: ${roleData.role}`);\n          }}\n        />\n      ))}\n    </div>\n  );\n}","size_bytes":1073},"client/src/components/examples/WeeklyReport.tsx":{"content":"import WeeklyReport from '../WeeklyReport';\n\nexport default function WeeklyReportExample() {\n  // todo: remove mock functionality\n  return (\n    <div className=\"p-4\">\n      <WeeklyReport\n        totalMinutes={186}\n        weeklyGoal={75}\n        weekChange={6}\n        projectedScore={186}\n        targetScore={200}\n        weeksToMeet={4}\n        status=\"on-track\"\n      />\n    </div>\n  );\n}","size_bytes":392},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/PracticeSession.tsx":{"content":"import { useState, useEffect, useCallback } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Clock, CheckCircle, XCircle, Target, Zap } from 'lucide-react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport ProblemInterface from './ProblemInterface';\n\ninterface PracticeSessionProps {\n  studentId: string;\n  roundType: 'sprint' | 'target' | 'numbersense' | 'team';\n  onComplete: (results: SessionResults) => void;\n  onCancel: () => void;\n}\n\ninterface SessionResults {\n  sessionId: string;\n  roundType: string;\n  score: number;\n  correctAnswers: number;\n  totalQuestions: number;\n  timeSpent: number;\n  accuracy: number;\n}\n\ninterface Problem {\n  id: string;\n  type: 'sprint' | 'target' | 'numbersense' | 'team';\n  prompt: string;\n  answer: string;\n  choices?: string[];\n  difficulty: number;\n  explanation?: string;\n}\n\ninterface SessionConfig {\n  duration: number; // minutes\n  questionCount: number;\n  calculatorAllowed: boolean;\n  scoringSystem: 'standard' | 'penalty' | 'target';\n  description: string;\n}\n\nconst SESSION_CONFIGS: Record<string, SessionConfig> = {\n  sprint: {\n    duration: 40,\n    questionCount: 30,\n    calculatorAllowed: false,\n    scoringSystem: 'penalty',\n    description: '40 min â€¢ 30 multiple choice â€¢ -1 for wrong answers'\n  },\n  target: {\n    duration: 24,\n    questionCount: 8,\n    calculatorAllowed: true,\n    scoringSystem: 'standard',\n    description: '4 pairs Ã— 6 min â€¢ calculators allowed'\n  },\n  numbersense: {\n    duration: 10,\n    questionCount: 80,\n    calculatorAllowed: false,\n    scoringSystem: 'standard',\n    description: '10 min â€¢ 80 problems â€¢ mental math only'\n  },\n  team: {\n    duration: 20,\n    questionCount: 10,\n    calculatorAllowed: true,\n    scoringSystem: 'standard',\n    description: '20 min â€¢ 10 problems â€¢ calculators allowed'\n  }\n};\n\nexport default function PracticeSession({ studentId, roundType, onComplete, onCancel }: PracticeSessionProps) {\n  const config = SESSION_CONFIGS[roundType];\n  const { toast } = useToast();\n  \n  // Session state\n  const [sessionId, setSessionId] = useState<string>('');\n  const [currentProblemIndex, setCurrentProblemIndex] = useState(0);\n  const [problems, setProblems] = useState<Problem[]>([]);\n  const [answers, setAnswers] = useState<Record<number, string>>({});\n  const [timeRemaining, setTimeRemaining] = useState(config.duration * 60); // seconds\n  const [sessionStartTime, setSessionStartTime] = useState<number>(0);\n  const [problemStartTime, setProblemStartTime] = useState<number>(0);\n  const [isSessionActive, setIsSessionActive] = useState(false);\n  const [hintsUsed, setHintsUsed] = useState<Record<number, number>>({});\n  const [showResults, setShowResults] = useState(false);\n\n  // Create session mutation\n  const createSessionMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', '/api/practice-sessions', {\n        studentId,\n        roundType,\n        totalQuestions: config.questionCount\n      });\n      const data = await response.json();\n      return data.session;\n    },\n    onSuccess: (session) => {\n      setSessionId(session.id);\n      setIsSessionActive(true);\n      setSessionStartTime(Date.now());\n      setProblemStartTime(Date.now());\n    }\n  });\n\n  // Generate problems query\n  const { data: generatedProblems, isLoading: isGeneratingProblems } = useQuery({\n    queryKey: ['generate-problems', roundType, config.questionCount],\n    queryFn: async () => {\n      const response = await apiRequest('POST', '/api/problems/generate', {\n        roundType,\n        difficulty: 3,\n        gradeLevel: 4,\n        count: Math.min(config.questionCount, 10) // Generate in batches\n      });\n      const data = await response.json();\n      return data.problems || [data.problem]; // Handle both single and batch responses\n    },\n    enabled: false // Don't run automatically\n  });\n\n  // Submit answer mutation\n  const submitAnswerMutation = useMutation({\n    mutationFn: async ({ problemId, answer, timeSpent, hintsUsed }: {\n      problemId: string;\n      answer: string;\n      timeSpent: number;\n      hintsUsed: number;\n    }) => {\n      const response = await apiRequest('POST', '/api/practice-sessions/submit-answer', {\n        sessionId,\n        problemId,\n        studentAnswer: answer,\n        timeSpent,\n        hintsUsed\n      });\n      return await response.json();\n    }\n  });\n\n  // Complete session mutation\n  const completeSessionMutation = useMutation({\n    mutationFn: async ({ score, timeSpent }: { score: number; timeSpent: number }) => {\n      const response = await apiRequest('POST', `/api/practice-sessions/${sessionId}/complete`, {\n        score,\n        timeSpent\n      });\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['student-sessions'] });\n      queryClient.invalidateQueries({ queryKey: ['student-progress'] });\n    }\n  });\n\n  // Initialize session\n  const startSession = async () => {\n    try {\n      await createSessionMutation.mutateAsync();\n      const response = await apiRequest('POST', '/api/problems/generate', {\n        roundType,\n        difficulty: 3,\n        gradeLevel: 4,\n        count: Math.min(config.questionCount, 10)\n      });\n      \n      const problemData = await response.json();\n      const generatedProblems = problemData.problems || [problemData.problem];\n      setProblems(generatedProblems);\n      \n      toast({\n        title: \"Session Started!\",\n        description: `Get ready for ${config.description}`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Start Session\",\n        description: \"Please try again later\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Auto-start session on component mount\n  useEffect(() => {\n    startSession();\n  }, []); // Empty dependency array = run once on mount\n\n  // Timer effect\n  useEffect(() => {\n    if (!isSessionActive || timeRemaining <= 0) return;\n\n    const timer = setInterval(() => {\n      setTimeRemaining((prev) => {\n        if (prev <= 1) {\n          setIsSessionActive(false);\n          handleSessionComplete();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [isSessionActive, timeRemaining]);\n\n  // Format time display\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Handle answer submission\n  const handleAnswer = async (answer: string) => {\n    if (!problems[currentProblemIndex]) return;\n\n    const currentTime = Date.now();\n    const timeSpentOnProblem = Math.round((currentTime - problemStartTime) / 1000);\n    const currentHints = hintsUsed[currentProblemIndex] || 0;\n    \n    // Record answer\n    setAnswers(prev => ({ ...prev, [currentProblemIndex]: answer }));\n    \n    // Submit to backend\n    try {\n      await submitAnswerMutation.mutateAsync({\n        problemId: problems[currentProblemIndex].id,\n        answer,\n        timeSpent: timeSpentOnProblem,\n        hintsUsed: currentHints\n      });\n    } catch (error) {\n      console.error('Failed to submit answer:', error);\n    }\n\n    // Move to next problem\n    if (currentProblemIndex < problems.length - 1) {\n      setCurrentProblemIndex(prev => prev + 1);\n      setProblemStartTime(currentTime);\n    } else {\n      // Session complete\n      handleSessionComplete();\n    }\n  };\n\n  // Handle hint request\n  const handleHint = () => {\n    setHintsUsed(prev => ({\n      ...prev,\n      [currentProblemIndex]: (prev[currentProblemIndex] || 0) + 1\n    }));\n    \n    toast({\n      title: \"Hint from Hedgie! ðŸ¦”\",\n      description: problems[currentProblemIndex]?.explanation || \"Think step by step and look for patterns!\",\n    });\n  };\n\n  // Calculate score using Math League rules\n  const calculateScore = () => {\n    const correctAnswers = Object.keys(answers).length; // This would be calculated properly from backend\n    const totalAnswered = Object.keys(answers).length;\n    \n    switch (config.scoringSystem) {\n      case 'penalty': // Sprint: +1 correct, -1 incorrect\n        return Math.max(0, correctAnswers - (totalAnswered - correctAnswers));\n      case 'standard': // Target, Team, Number Sense: +1 correct, 0 incorrect\n        return correctAnswers;\n      default:\n        return correctAnswers;\n    }\n  };\n\n  // Handle session completion\n  const handleSessionComplete = async () => {\n    if (!sessionId) return;\n    \n    setIsSessionActive(false);\n    const totalTimeSpent = Math.round((Date.now() - sessionStartTime) / 1000);\n    const score = calculateScore();\n    const correctAnswers = Object.keys(answers).length; // Would be calculated from backend\n    \n    try {\n      await completeSessionMutation.mutateAsync({\n        score,\n        timeSpent: totalTimeSpent\n      });\n\n      const results: SessionResults = {\n        sessionId,\n        roundType,\n        score,\n        correctAnswers,\n        totalQuestions: config.questionCount,\n        timeSpent: totalTimeSpent,\n        accuracy: correctAnswers / Object.keys(answers).length * 100\n      };\n\n      setShowResults(true);\n      \n      setTimeout(() => {\n        onComplete(results);\n      }, 3000); // Show results for 3 seconds\n      \n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save session results\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Progress calculation\n  const progress = problems.length > 0 ? (currentProblemIndex / problems.length) * 100 : 0;\n  const timeProgress = (1 - (timeRemaining / (config.duration * 60))) * 100;\n\n  // Loading state\n  if (createSessionMutation.isPending || isGeneratingProblems || problems.length === 0) {\n    return (\n      <div className=\"flex flex-col items-center justify-center min-h-[400px] space-y-4\">\n        <div className=\"text-lg font-medium\">Preparing your {roundType} session...</div>\n        <div className=\"text-sm text-muted-foreground\">Hedgie is getting your problems ready! ðŸ¦”</div>\n        <Button variant=\"outline\" onClick={onCancel}>Cancel</Button>\n      </div>\n    );\n  }\n\n  // Results screen\n  if (showResults) {\n    const score = calculateScore();\n    const accuracy = Object.keys(answers).length > 0 ? \n      (Object.keys(answers).length / Object.keys(answers).length) * 100 : 0;\n    \n    return (\n      <div className=\"flex flex-col items-center justify-center min-h-[400px] space-y-6\">\n        <div className=\"text-center space-y-2\">\n          <div className=\"text-3xl\">ðŸŽ‰</div>\n          <h2 className=\"text-2xl font-bold\">Great Job!</h2>\n          <p className=\"text-muted-foreground\">You completed the {roundType} round</p>\n        </div>\n        \n        <div className=\"grid grid-cols-2 gap-4 w-full max-w-md\">\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-primary\">{score}</div>\n              <div className=\"text-sm text-muted-foreground\">Score</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">{accuracy.toFixed(0)}%</div>\n              <div className=\"text-sm text-muted-foreground\">Accuracy</div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  const currentProblem = problems[currentProblemIndex];\n  if (!currentProblem) return null;\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"practice-session\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold capitalize\" data-testid=\"text-session-title\">\n            {roundType} Round\n          </h1>\n          <p className=\"text-muted-foreground\">{config.description}</p>\n        </div>\n        <Button variant=\"outline\" onClick={onCancel} data-testid=\"button-cancel-session\">\n          End Session\n        </Button>\n      </div>\n\n      {/* Status Bar */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {/* Timer */}\n            <div className=\"flex items-center space-x-2\">\n              <Clock className=\"w-4 h-4\" />\n              <div>\n                <div className=\"text-lg font-mono\" data-testid=\"text-timer\">\n                  {formatTime(timeRemaining)}\n                </div>\n                <Progress value={timeProgress} className=\"w-full mt-1\" />\n              </div>\n            </div>\n\n            {/* Progress */}\n            <div className=\"flex items-center space-x-2\">\n              <Target className=\"w-4 h-4\" />\n              <div>\n                <div className=\"text-sm font-medium\" data-testid=\"text-progress\">\n                  Problem {currentProblemIndex + 1} of {problems.length}\n                </div>\n                <Progress value={progress} className=\"w-full mt-1\" />\n              </div>\n            </div>\n\n            {/* Score */}\n            <div className=\"flex items-center space-x-2\">\n              <Zap className=\"w-4 h-4\" />\n              <div>\n                <div className=\"text-sm font-medium\" data-testid=\"text-score\">\n                  Score: {calculateScore()}\n                </div>\n                <div className=\"text-xs text-muted-foreground\">\n                  Answered: {Object.keys(answers).length}\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Problem Interface */}\n      <ProblemInterface\n        roundType={roundType}\n        problem={{\n          id: currentProblem.id,\n          text: currentProblem.prompt,\n          choices: currentProblem.choices,\n          type: currentProblem.choices ? 'multiple_choice' : 'numerical'\n        }}\n        onAnswer={handleAnswer}\n        showHint={true}\n        onHint={handleHint}\n      />\n      \n      {/* Hedgie Encouragement */}\n      <Card className=\"bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-950/20 dark:to-purple-950/20 border-dashed\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"text-2xl\">ðŸ¦”</div>\n            <div>\n              <p className=\"text-sm font-medium\">Hedgie says:</p>\n              <p className=\"text-sm text-muted-foreground\">\n                {currentProblemIndex < 5 ? \"You're doing great! Take your time.\" :\n                 currentProblemIndex < 15 ? \"Keep up the good work!\" :\n                 \"You're almost there! Stay focused!\"}\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":15035},"replit.md":{"content":"# Overview\n\nHedgie Math Meets Prep is a kid-friendly Math League competition preparation PWA designed for elementary students (grades 3-6). The application serves as an AI-powered coaching assistant that helps students practice and prepare for Math League competitions through interactive problem-solving sessions, progress tracking, and personalized learning experiences. The app features a warm, approachable design inspired by educational apps like Khan Academy Kids and Duolingo, with a friendly hedgehog mascot named Hedgie as the coach.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe client is built as a React-based Progressive Web App using modern web technologies:\n- **Framework**: React 18 with TypeScript for type safety\n- **Styling**: Tailwind CSS with a custom design system featuring warm, kid-friendly colors and typography\n- **Component Library**: Radix UI primitives with shadcn/ui components for consistent, accessible UI elements\n- **State Management**: TanStack React Query for server state management and data fetching\n- **Routing**: Wouter for lightweight client-side routing\n- **Build Tool**: Vite for fast development and optimized production builds\n\n## Backend Architecture  \nThe server follows a RESTful API design built on Node.js:\n- **Framework**: Express.js with TypeScript for the web server\n- **API Structure**: RESTful endpoints organized by feature (problems, practice sessions, student management)\n- **Problem Generation**: OpenAI GPT integration for generating Math League problems dynamically\n- **Request Validation**: Zod schemas for type-safe request/response validation\n- **Error Handling**: Centralized error middleware with structured error responses\n\n## Database Layer\nThe application uses a PostgreSQL database with Drizzle ORM:\n- **Database**: Neon PostgreSQL for cloud-hosted database\n- **ORM**: Drizzle ORM for type-safe database operations and migrations\n- **Schema**: Relational design with tables for users, students, problems, practice sessions, problem attempts, and student goals\n- **Data Types**: Support for Math League round types (sprint, target, numbersense, team) with appropriate scoring systems\n\n## Authentication & Authorization\nUser management system for parent/coach oversight:\n- **User Model**: Parent/coach accounts that can manage multiple student profiles\n- **Student Profiles**: Individual student accounts with grade level, goals, and progress tracking\n- **Session Management**: Express sessions with PostgreSQL session store\n- **Access Control**: Route-level protection ensuring users can only access their own student data\n\n## Math League Integration\nSpecialized features for Math League competition preparation:\n- **Round Types**: Support for all four Math League rounds (Number Sense, Sprint, Target, Team) with accurate timing and scoring\n- **Problem Generation**: AI-powered problem creation that mirrors official Math League difficulty and style\n- **Practice Sessions**: Timed practice rounds that simulate real competition conditions\n- **Progress Tracking**: Composite scoring system that matches official Math League scoring rules\n\n# External Dependencies\n\n## Database Services\n- **Neon PostgreSQL**: Cloud-hosted PostgreSQL database for data persistence\n- **Connection Pooling**: @neondatabase/serverless for efficient database connections\n\n## AI Integration\n- **OpenAI API**: GPT model for generating authentic Math League problems\n- **Problem Categories**: Support for generating problems across different Math League topics and difficulty levels\n\n## UI Components\n- **Radix UI**: Comprehensive set of accessible UI primitives\n- **Lucide Icons**: Icon library for consistent iconography\n- **Google Fonts**: Poppins and Inter fonts for kid-friendly typography\n\n## Development Tools\n- **TypeScript**: Static type checking across the entire stack\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n- **Vite**: Build tool with hot module replacement and optimized builds\n- **ESBuild**: Fast JavaScript bundler for server-side code\n\n## Session Management\n- **connect-pg-simple**: PostgreSQL session store for Express sessions\n- **Express Session**: Server-side session management\n\n## Validation & Forms\n- **Zod**: Runtime type validation for API endpoints and form data\n- **React Hook Form**: Form management with validation integration","size_bytes":4420}},"version":1}